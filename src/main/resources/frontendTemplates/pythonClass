from typing import Optional
import string
<#list pc.imports as import>
from .${import.name} import ${import.name}
</#list>


class ${pc.name}<#if pc.inherits?size gt 0 >(${pc.getCommaSeparatedInherits()})</#if>:
    """
<#if pc.intro != "">
    Intro: ${pc.intro}

</#if><#if pc.label != "">
    Label: ${pc.label}

</#if><#if pc.message != "">
    Message: ${pc.message}

</#if><#if pc.others != "">
    Others: ${pc.others}
</#if>
    """
    <#if pc.enums?size gt 0><#list pc.enums as key, value>
    ${key} = '${value}'
    </#list><#elseif pc.members?size == 0>
    pass<#else>
    def __init__(self,
        <#list pc.members as member>
                 ${member.name}: Optional[${member.getType()}] = None,
        </#list>
                 ):
        <#list pc.members as member>
        self._${member.name}: Optional[${member.getType()}] = ${member.name}
        </#list>

    <#list pc.members as member>
    @property
    def ${member.name}(self) -> ${member.type}:
        """
<#if member.default != "">
        Default: ${member.default}

</#if><#if member.info != "">
        Info:  ${member.info}

</#if><#if member.others != "">
        Others:  ${member.others}
</#if>
        """
        return self._${member.name}

    @${member.name}.setter
    def ${member.name}(self, value: ${member.type}):
        self._${member.name} = value

    </#list></#if>