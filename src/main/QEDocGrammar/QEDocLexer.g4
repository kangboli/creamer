lexer grammar QEDocLexer;
Comments: '#'~[\n]*'\n' -> skip;
IntroBegin: 'intro' WS? OB -> pushMode(richText);
DefaultBegin: 'default' WS? OB -> pushMode(richText);
InfoBegin: 'info' WS? OB -> pushMode(richText);
OptBegin: 'opt' WS+ '-val' WS? (ID|String|OB WS? String WS?(',' WS? String WS?)* CB|OB ID WS* EQ WS* ID CB) WS? OB -> pushMode(richText);
StatusBegin: 'status' WS? OB -> pushMode(richText);
TextBegin: 'text' WS? OB -> pushMode(richText);
ScopedTitleBegin: '-title' WS? OB -> pushMode(richText);
LabelBegin: 'label' WS? OB -> pushMode(richText);
MessageBegin: 'message' WS? OB -> pushMode(richText);
DistributionBegin: '-distribution' WS+ OB ->pushMode(richText);

OptionalSwitch: Flag WS Optional;
TOC: 'toc' WS? OB WS? CB;
COMMA: ',';
CardFlag: 'flag';
EQ: '=';
Group: 'group';
NameList: 'namelist';
Var: 'var';
Dim: ('dimension'|'multidimension');
See: 'see';
VarGroup: 'vargroup';
InputDiscription: 'input_description';
Options: 'options';
Section: 'section';
Subsection: 'subsection';
Card: 'card';
Choose: 'choose';
When: 'when' WS '-test';
ElseWhen: 'elsewhen' WS '-test';
Otherwise: 'otherwise';
PIPE: '|';
Enum: 'enum';
Syntax: 'syntax';
Line: 'line';
Table: 'table';
Optional: 'optional';
Rows: 'rows';
Cols: 'cols';
Row: 'row';
Col: 'col';
RowGroup: 'rowgroup';
ColGroup: 'colgroup';
Conditional: 'conditional';
Flag: '-'ID ;
String: '\''WS? (WS? ID WS?)* WS?'\'';
ID: Word([-+]Word)?;
Mul: '*';
Semicolon: ';' -> skip;
Plus: '+';
ArgOr: '\\ or\\ ';
ConditionalPredicates: '"'.*?'"';
fragment
Word: [._a-zA-Z0-9()]+ ;
WS : [ \t\r\n]+ -> skip;
OB: '{';
CB: '}';

mode richText;
Ref: '@ref' WST? WordText;
//Bold: ('@b' WST? ScopedText|'@b' WST? WordText);
IText: '@i' WST? (StringText|LogicalText|ScopedText|WordText);
BoldText: '@b' WST? (StringText|LogicalText|ScopedText|WordText);
TTText: '@tt' WST? (StringText|LogicalText|ScopedText|WordText);

StringText: '\''WST? (WST? WordText WST?)* WST?'\'';
LogicalText: ('.FALSE.'|'.TRUE.');
ScopedText: '{' (WST? WordText WST?)* WST? '}';
WordText: ~[@{} \r\t\n]+;
//NL: WST*'\n';
WST : [ \t\r\n]+ -> skip;
EndText: '}' -> popMode;